{"name": "test_RunThroughInvalidInputs", "status": "broken", "statusDetails": {"message": "UnboundLocalError: local variable 'driver' referenced before assignment", "trace": "self = <selenium.webdriver.chrome.service.Service object at 0x000001E2FC788B20>\n\n    def start(self):\n        \"\"\"\n        Starts the Service.\n    \n        :Exceptions:\n         - WebDriverException : Raised either when it can't start the service\n           or when it can't connect to the service\n        \"\"\"\n        try:\n            cmd = [self.path]\n            cmd.extend(self.command_line_args())\n>           self.process = subprocess.Popen(cmd, env=self.env,\n                                            close_fds=platform.system() != 'Windows',\n                                            stdout=self.log_file,\n                                            stderr=self.log_file,\n                                            stdin=PIPE)\n\n..\\dnbassignment\\venv\\lib\\site-packages\\selenium\\webdriver\\common\\service.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Popen: returncode: None args: ['../Driver/chromedriver.exe', '--port=54746']>, args = ['../Driver/chromedriver.exe', '--port=54746']\nbufsize = -1, executable = None, stdin = -1, stdout = -3, stderr = -3, preexec_fn = None, close_fds = False, shell = False, cwd = None\nenv = environ({'__INTELLIJ_COMMAND_HISTFILE__': 'C:\\\\Users\\\\Dpkpc\\\\AppData\\\\Local\\\\JetBrains\\\\PyCharm2021.1\\\\terminal\\\\histo...7f35f49', 'PYTEST_CURRENT_TEST': 'Tests/test_InvalidLogin.py::Test_InvalidLogin::test_RunThroughInvalidInputs (call)'})\nuniversal_newlines = None, startupinfo = None, creationflags = 0, restore_signals = True, start_new_session = False, pass_fds = ()\n\n    def __init__(self, args, bufsize=-1, executable=None,\n                 stdin=None, stdout=None, stderr=None,\n                 preexec_fn=None, close_fds=True,\n                 shell=False, cwd=None, env=None, universal_newlines=None,\n                 startupinfo=None, creationflags=0,\n                 restore_signals=True, start_new_session=False,\n                 pass_fds=(), *, user=None, group=None, extra_groups=None,\n                 encoding=None, errors=None, text=None, umask=-1):\n        \"\"\"Create new Popen instance.\"\"\"\n        _cleanup()\n        # Held while anything is calling waitpid before returncode has been\n        # updated to prevent clobbering returncode if wait() or poll() are\n        # called from multiple threads at once.  After acquiring the lock,\n        # code must re-check self.returncode to see if another thread just\n        # finished a waitpid() call.\n        self._waitpid_lock = threading.Lock()\n    \n        self._input = None\n        self._communication_started = False\n        if bufsize is None:\n            bufsize = -1  # Restore default\n        if not isinstance(bufsize, int):\n            raise TypeError(\"bufsize must be an integer\")\n    \n        if _mswindows:\n            if preexec_fn is not None:\n                raise ValueError(\"preexec_fn is not supported on Windows \"\n                                 \"platforms\")\n        else:\n            # POSIX\n            if pass_fds and not close_fds:\n                warnings.warn(\"pass_fds overriding close_fds.\", RuntimeWarning)\n                close_fds = True\n            if startupinfo is not None:\n                raise ValueError(\"startupinfo is only supported on Windows \"\n                                 \"platforms\")\n            if creationflags != 0:\n                raise ValueError(\"creationflags is only supported on Windows \"\n                                 \"platforms\")\n    \n        self.args = args\n        self.stdin = None\n        self.stdout = None\n        self.stderr = None\n        self.pid = None\n        self.returncode = None\n        self.encoding = encoding\n        self.errors = errors\n    \n        # Validate the combinations of text and universal_newlines\n        if (text is not None and universal_newlines is not None\n            and bool(universal_newlines) != bool(text)):\n            raise SubprocessError('Cannot disambiguate when both text '\n                                  'and universal_newlines are supplied but '\n                                  'different. Pass one or the other.')\n    \n        # Input and output objects. The general principle is like\n        # this:\n        #\n        # Parent                   Child\n        # ------                   -----\n        # p2cwrite   ---stdin--->  p2cread\n        # c2pread    <--stdout---  c2pwrite\n        # errread    <--stderr---  errwrite\n        #\n        # On POSIX, the child objects are file descriptors.  On\n        # Windows, these are Windows file handles.  The parent objects\n        # are file descriptors on both platforms.  The parent objects\n        # are -1 when not using PIPEs. The child objects are -1\n        # when not redirecting.\n    \n        (p2cread, p2cwrite,\n         c2pread, c2pwrite,\n         errread, errwrite) = self._get_handles(stdin, stdout, stderr)\n    \n        # We wrap OS handles *before* launching the child, otherwise a\n        # quickly terminating child could make our fds unwrappable\n        # (see #8458).\n    \n        if _mswindows:\n            if p2cwrite != -1:\n                p2cwrite = msvcrt.open_osfhandle(p2cwrite.Detach(), 0)\n            if c2pread != -1:\n                c2pread = msvcrt.open_osfhandle(c2pread.Detach(), 0)\n            if errread != -1:\n                errread = msvcrt.open_osfhandle(errread.Detach(), 0)\n    \n        self.text_mode = encoding or errors or text or universal_newlines\n    \n        # How long to resume waiting on a child after the first ^C.\n        # There is no right value for this.  The purpose is to be polite\n        # yet remain good for interactive users trying to exit a tool.\n        self._sigint_wait_secs = 0.25  # 1/xkcd221.getRandomNumber()\n    \n        self._closed_child_pipe_fds = False\n    \n        if self.text_mode:\n            if bufsize == 1:\n                line_buffering = True\n                # Use the default buffer size for the underlying binary streams\n                # since they don't support line buffering.\n                bufsize = -1\n            else:\n                line_buffering = False\n    \n        gid = None\n        if group is not None:\n            if not hasattr(os, 'setregid'):\n                raise ValueError(\"The 'group' parameter is not supported on the \"\n                                 \"current platform\")\n    \n            elif isinstance(group, str):\n                if grp is None:\n                    raise ValueError(\"The group parameter cannot be a string \"\n                                     \"on systems without the grp module\")\n    \n                gid = grp.getgrnam(group).gr_gid\n            elif isinstance(group, int):\n                gid = group\n            else:\n                raise TypeError(\"Group must be a string or an integer, not {}\"\n                                .format(type(group)))\n    \n            if gid < 0:\n                raise ValueError(f\"Group ID cannot be negative, got {gid}\")\n    \n        gids = None\n        if extra_groups is not None:\n            if not hasattr(os, 'setgroups'):\n                raise ValueError(\"The 'extra_groups' parameter is not \"\n                                 \"supported on the current platform\")\n    \n            elif isinstance(extra_groups, str):\n                raise ValueError(\"Groups must be a list, not a string\")\n    \n            gids = []\n            for extra_group in extra_groups:\n                if isinstance(extra_group, str):\n                    if grp is None:\n                        raise ValueError(\"Items in extra_groups cannot be \"\n                                         \"strings on systems without the \"\n                                         \"grp module\")\n    \n                    gids.append(grp.getgrnam(extra_group).gr_gid)\n                elif isinstance(extra_group, int):\n                    gids.append(extra_group)\n                else:\n                    raise TypeError(\"Items in extra_groups must be a string \"\n                                    \"or integer, not {}\"\n                                    .format(type(extra_group)))\n    \n            # make sure that the gids are all positive here so we can do less\n            # checking in the C code\n            for gid_check in gids:\n                if gid_check < 0:\n                    raise ValueError(f\"Group ID cannot be negative, got {gid_check}\")\n    \n        uid = None\n        if user is not None:\n            if not hasattr(os, 'setreuid'):\n                raise ValueError(\"The 'user' parameter is not supported on \"\n                                 \"the current platform\")\n    \n            elif isinstance(user, str):\n                if pwd is None:\n                    raise ValueError(\"The user parameter cannot be a string \"\n                                     \"on systems without the pwd module\")\n    \n                uid = pwd.getpwnam(user).pw_uid\n            elif isinstance(user, int):\n                uid = user\n            else:\n                raise TypeError(\"User must be a string or an integer\")\n    \n            if uid < 0:\n                raise ValueError(f\"User ID cannot be negative, got {uid}\")\n    \n        try:\n            if p2cwrite != -1:\n                self.stdin = io.open(p2cwrite, 'wb', bufsize)\n                if self.text_mode:\n                    self.stdin = io.TextIOWrapper(self.stdin, write_through=True,\n                            line_buffering=line_buffering,\n                            encoding=encoding, errors=errors)\n            if c2pread != -1:\n                self.stdout = io.open(c2pread, 'rb', bufsize)\n                if self.text_mode:\n                    self.stdout = io.TextIOWrapper(self.stdout,\n                            encoding=encoding, errors=errors)\n            if errread != -1:\n                self.stderr = io.open(errread, 'rb', bufsize)\n                if self.text_mode:\n                    self.stderr = io.TextIOWrapper(self.stderr,\n                            encoding=encoding, errors=errors)\n    \n>           self._execute_child(args, executable, preexec_fn, close_fds,\n                                pass_fds, cwd, env,\n                                startupinfo, creationflags, shell,\n                                p2cread, p2cwrite,\n                                c2pread, c2pwrite,\n                                errread, errwrite,\n                                restore_signals,\n                                gid, gids, uid, umask,\n                                start_new_session)\n\nC:\\Python39\\lib\\subprocess.py:951: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Popen: returncode: None args: ['../Driver/chromedriver.exe', '--port=54746']>, args = '../Driver/chromedriver.exe --port=54746'\nexecutable = None, preexec_fn = None, close_fds = False, pass_fds = (), cwd = None\nenv = environ({'__INTELLIJ_COMMAND_HISTFILE__': 'C:\\\\Users\\\\Dpkpc\\\\AppData\\\\Local\\\\JetBrains\\\\PyCharm2021.1\\\\terminal\\\\histo...7f35f49', 'PYTEST_CURRENT_TEST': 'Tests/test_InvalidLogin.py::Test_InvalidLogin::test_RunThroughInvalidInputs (call)'})\nstartupinfo = <subprocess.STARTUPINFO object at 0x000001E2FC788430>, creationflags = 0, shell = False, p2cread = Handle(324), p2cwrite = 15\nc2pread = -1, c2pwrite = Handle(624), errread = -1, errwrite = Handle(796), unused_restore_signals = True, unused_gid = None, unused_gids = None\nunused_uid = None, unused_umask = -1, unused_start_new_session = False\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals,\n                       unused_gid, unused_gids, unused_uid,\n                       unused_umask,\n                       unused_start_new_session):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if isinstance(args, str):\n            pass\n        elif isinstance(args, bytes):\n            if shell:\n                raise TypeError('bytes args is not allowed on Windows')\n            args = list2cmdline([args])\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = list2cmdline([args])\n        else:\n            args = list2cmdline(args)\n    \n        if executable is not None:\n            executable = os.fsdecode(executable)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        else:\n            # bpo-34044: Copy STARTUPINFO since it is modified above,\n            # so the caller can reuse it multiple times.\n            startupinfo = startupinfo.copy()\n    \n        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n        if use_std_handles:\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        attribute_list = startupinfo.lpAttributeList\n        have_handle_list = bool(attribute_list and\n                                \"handle_list\" in attribute_list and\n                                attribute_list[\"handle_list\"])\n    \n        # If we were given an handle_list or need to create one\n        if have_handle_list or (use_std_handles and close_fds):\n            if attribute_list is None:\n                attribute_list = startupinfo.lpAttributeList = {}\n            handle_list = attribute_list[\"handle_list\"] = \\\n                list(attribute_list.get(\"handle_list\", []))\n    \n            if use_std_handles:\n                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n    \n            handle_list[:] = self._filter_handle_list(handle_list)\n    \n            if handle_list:\n                if not close_fds:\n                    warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                  \"overriding close_fds\", RuntimeWarning)\n    \n                # When using the handle_list we always request to inherit\n                # handles but the only handles that will be inherited are\n                # the ones in the handle_list\n                close_fds = False\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            comspec = os.environ.get(\"COMSPEC\", \"cmd.exe\")\n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        if cwd is not None:\n            cwd = os.fsdecode(cwd)\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        # Start the process\n        try:\n>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n                                     startupinfo)\nE                                    FileNotFoundError: [WinError 2] The system cannot find the file specified\n\nC:\\Python39\\lib\\subprocess.py:1420: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Tests.test_InvalidLogin.Test_InvalidLogin object at 0x000001E2FC7887C0>\n\n    @allure.description(\"Test Run Through Invalid Inputs\")\n    @allure.step\n    def test_RunThroughInvalidInputs(self):\n        try:\n    \n>           driver = WebdriverFactory().get_driver(CommonData.BROWSER)\n\nTests\\test_InvalidLogin.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Utils.WebdriverFactory.WebdriverFactory object at 0x000001E2FC7889A0>, browser = 'chrome'\n\n    def get_driver(self, browser):\n        if browser.lower() == \"firefox\":\n            driver = webdriver.Firefox(executable_path=\"../Driver/geckodriver.exe\")\n        elif browser.lower() == \"chrome\":\n>           driver = webdriver.Chrome(executable_path=\"../Driver/chromedriver.exe\")\n\nUtils\\WebdriverFactory.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[AttributeError(\"'WebDriver' object has no attribute 'session_id'\") raised in repr()] WebDriver object at 0x1e2fc788dc0>\nexecutable_path = '../Driver/chromedriver.exe', port = 0, options = None, service_args = None\ndesired_capabilities = {'browserName': 'chrome', 'goog:chromeOptions': {'args': [], 'extensions': []}, 'platform': 'ANY', 'version': ''}\nservice_log_path = None, chrome_options = None, keep_alive = True\n\n    def __init__(self, executable_path=\"chromedriver\", port=0,\n                 options=None, service_args=None,\n                 desired_capabilities=None, service_log_path=None,\n                 chrome_options=None, keep_alive=True):\n        \"\"\"\n        Creates a new instance of the chrome driver.\n    \n        Starts the service and then creates new instance of chrome driver.\n    \n        :Args:\n         - executable_path - path to the executable. If the default is used it assumes the executable is in the $PATH\n         - port - port you would like the service to run, if left as 0, a free port will be found.\n         - options - this takes an instance of ChromeOptions\n         - service_args - List of args to pass to the driver service\n         - desired_capabilities - Dictionary object with non-browser specific\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n         - service_log_path - Where to log information from the driver.\n         - chrome_options - Deprecated argument for options\n         - keep_alive - Whether to configure ChromeRemoteConnection to use HTTP keep-alive.\n        \"\"\"\n        if chrome_options:\n            warnings.warn('use options instead of chrome_options',\n                          DeprecationWarning, stacklevel=2)\n            options = chrome_options\n    \n        if options is None:\n            # desired_capabilities stays as passed in\n            if desired_capabilities is None:\n                desired_capabilities = self.create_options().to_capabilities()\n        else:\n            if desired_capabilities is None:\n                desired_capabilities = options.to_capabilities()\n            else:\n                desired_capabilities.update(options.to_capabilities())\n    \n        self.service = Service(\n            executable_path,\n            port=port,\n            service_args=service_args,\n            log_path=service_log_path)\n>       self.service.start()\n\n..\\dnbassignment\\venv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.service.Service object at 0x000001E2FC788B20>\n\n    def start(self):\n        \"\"\"\n        Starts the Service.\n    \n        :Exceptions:\n         - WebDriverException : Raised either when it can't start the service\n           or when it can't connect to the service\n        \"\"\"\n        try:\n            cmd = [self.path]\n            cmd.extend(self.command_line_args())\n            self.process = subprocess.Popen(cmd, env=self.env,\n                                            close_fds=platform.system() != 'Windows',\n                                            stdout=self.log_file,\n                                            stderr=self.log_file,\n                                            stdin=PIPE)\n        except TypeError:\n            raise\n        except OSError as err:\n            if err.errno == errno.ENOENT:\n>               raise WebDriverException(\n                    \"'%s' executable needs to be in PATH. %s\" % (\n                        os.path.basename(self.path), self.start_error_message)\nE                       selenium.common.exceptions.WebDriverException: Message: 'chromedriver.exe' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home\n\n..\\dnbassignment\\venv\\lib\\site-packages\\selenium\\webdriver\\common\\service.py:81: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Tests.test_InvalidLogin.Test_InvalidLogin object at 0x000001E2FC7887C0>\n\n    @allure.description(\"Test Run Through Invalid Inputs\")\n    @allure.step\n    def test_RunThroughInvalidInputs(self):\n        try:\n    \n            driver = WebdriverFactory().get_driver(CommonData.BROWSER)\n            driver.get(CommonData.BASEURL)\n            lp = LoginPage(driver)\n            lp.excel_iteration()\n        except:\n>           allure.attach(driver.get_screenshot_as_png(),\n                          name=\"Screenshot of Error\",\n                          attachment_type=allure.attachment_type.PNG)\nE           UnboundLocalError: local variable 'driver' referenced before assignment\n\nTests\\test_InvalidLogin.py:32: UnboundLocalError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Tests.test_InvalidLogin.Test_InvalidLogin object at 0x000001E2FC7887C0>\n\n    @allure.description(\"Test Run Through Invalid Inputs\")\n    @allure.step\n    def test_RunThroughInvalidInputs(self):\n        try:\n    \n            driver = WebdriverFactory().get_driver(CommonData.BROWSER)\n            driver.get(CommonData.BASEURL)\n            lp = LoginPage(driver)\n            lp.excel_iteration()\n        except:\n            allure.attach(driver.get_screenshot_as_png(),\n                          name=\"Screenshot of Error\",\n                          attachment_type=allure.attachment_type.PNG)\n            allure.attach(str(sys.exc_info()), 'Error Trace', allure.attachment_type.TEXT)\n            raise\n        finally:\n>           driver.close()\nE           UnboundLocalError: local variable 'driver' referenced before assignment\n\nTests\\test_InvalidLogin.py:38: UnboundLocalError"}, "description": "Test Run Through Invalid Inputs", "steps": [{"name": "test_RunThroughInvalidInputs", "status": "broken", "statusDetails": {"message": "UnboundLocalError: local variable 'driver' referenced before assignment\n", "trace": "  File \"c:\\users\\dpkpc\\pycharmprojects\\dnbassignment\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Dpkpc\\PycharmProjects\\DNBAssignment Pytest\\Tests\\test_InvalidLogin.py\", line 38, in test_RunThroughInvalidInputs\n    driver.close()\n"}, "start": 1622978368214, "stop": 1622978368226}], "start": 1622978368214, "stop": 1622978368230, "uuid": "6ec51fd2-7658-48d7-ab3a-7fcc7fd330a0", "historyId": "009d1011368ce3f9da70162cce4254b7", "testCaseId": "2bef674a9cac19ff605e3e0006274f6e", "fullName": "Tests.test_InvalidLogin.Test_InvalidLogin#test_RunThroughInvalidInputs", "labels": [{"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_InvalidLogin"}, {"name": "subSuite", "value": "Test_InvalidLogin"}, {"name": "host", "value": "DESKTOP-3H0QEFI"}, {"name": "thread", "value": "2024-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_InvalidLogin"}]}